- 별칭(as, 알리아스)
SELECT 	EMPLOYEE_ID AS "ID" , SALARY "SAL", DEPARTMENT_ID de		

- distinct : 중복제거
SELECT 	DISTINCT JOB_ID 		

- not , <> , !=

- between A and B : A보다 크거나 같고 B보다 작거나 같은 범위(=and)

- in(A, B, .., N) : A거나 B거나(=or)	
WHERE 	salary IN (6500, 7700, 13000);

- like 'A%' : A로 시작하는 단어 찾는 것 (%는 어떤게 와도 상관없다는 의미)
WHERE 	FIRST_NAME LIKE 'D%';
- like '%a' : a로 끝나는 단어 찾는 것
- like '_a%' : 두번째 자리에 a가 놓인 단어 찾는것(_언더바로 자릿수표현)
- like '%a% : a가 들어가는 단어 찾는 것

- is null : null 찾기
- is not null : null이 아닌것 찾기

- order by : 오름차순 정렬
- order by ~ desc : 내림차순 정렬

- sum() : 합계
- count() : 갯수
- avg() : 평균
- max() : 최대값
- min() : 최소값
- abs() : 절대값
- round() : 반올림
- trunc() : 소수점 뒤에 다 삭제
- concat(char1, char2) : 문자열끼리 연결 ('a' || 'b'도 같은 결과 얻는다 )
SELECT 	CONCAT('good','bad'), 'good'||'bad' 

- initcap() : 첫글자 대문자로
- lower(char), upper(char) : 대소문자
- lpad(값, 총 문자길이, 채움문자) : 왼쪽에(앞쪽) 채움문자가 값이 총문자길이보다 짧으면 모자란 문자길이 만큼 채워짐
- rpad(값, 총 문자길이, 채움문자) : 오른쪽에(뒤쪽) 채움문자가 값이 총문자길이보다 짧으면 모자란 문자길이 만큼 채워짐
- LTRIM(문자열, 옵션) : 왼쪽에서 옵션에 적은 문자가 없어짐
- RTRIM(문자열, 옵션) : 오른쪽에서 옵션에 적은 문자가 없어짐
- substr(문자열, 시작위치, 길이)
-- replace : (문자열, 바꿀문자열, 바뀔문자열) 
SELECT 	REPLACE('good morning tom', 'morning', 'evenning')

- sysdate : 현재 시각
SELECT 	SYSDATE 
- add_months : 7개월을 더한다.
SELECT 	ADD_MONTHS(SYSDATE, 7), SYSDATE 
- 현재 달의 마지막 날짜 : last_day
SELECT 	LAST_DAY(SYSDATE) 
- 날짜 interval : 원하는 숫자, 원하는 숫자만큼 변경하고 싶은 데이터
SELECT 	SYSDATE + (INTERVAL '1' YEAR), SYSDATE + (INTERVAL '1' MONTH), SYSDATE + (INTERVAL '1' DAY)
	, 	SYSDATE + (INTERVAL '1' HOUR), SYSDATE + (INTERVAL '1' MINUTE),SYSDATE + (INTERVAL '1' SECOND)
	, 	SYSDATE 

- to_char() : 문자열 변환
SELECT 	SYSDATE , TO_CHAR(sysdate, 'yyyy/mm/dd')

- nvl() : 널값을 다른 데이터로 변경하는 함수
SELECT 	FIRST_NAME , LAST_NAME , NVL(COMMISSION_PCT, 0) 

- decode() : switch문의 역할을 하는 함수
- department_id가 20이면 Marketing -> MA / 60이면 IT -> IT / 90이면 Executive -> EX / 나머지 -> ETC
SELECT 	DEPARTMENT_ID , DECODE(DEPARTMENT_ID, 20, 'MA', 60, 'IT', 90, 'EX', 'ETC') 

- case() : else if 문과 같은 역할 함수
SELECT 	FIRST_NAME , LAST_NAME , DEPARTMENT_ID 
	,	CASE WHEN DEPARTMENT_ID = 20 THEN 'MA'
			 WHEN DEPARTMENT_ID = 60 THEN 'IT'
			 WHEN DEPARTMENT_ID = 90 THEN 'EX'
			 ELSE ''
		END	 "deptvalue"

- Inner Join : 교집합, 조건에 일치되는 데이터만 가져옴
- left outer join : 왼쪽을 기준으로 데이터 가져옴
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- create table  : 테이블 생성하기
CREATE TABLE 테이블명(
	컬럼명		타입,
);

타입이 숫자면 Number(자릿수), 글자면 varchar2(글자수)를 주로 사용

- 기존 테이블과 동일한 데이터를 가진 테이블을 만들고 싶다면 as를 사용하여 만들어준다
CREATE TABLE 테이블명
AS
SELECT * FROM 가져오고 싶은 데이터를 가진 테이블명 ;

- alter table 테이블명 add () : 테이블 수정하기
ALTER TABLE EMPLOYEES2 ADD(
	MANAGER_ID	VARCHAR2(20)
);
- alter table 테이블명 modify() : 컬럼 수정하기
ALTER TABLE EMPLOYEES2 MODIFY(
	MANAGER_ID	VARCHAR2(30)
);

- alter table 테이블명 drop column 컬럼명 : 컬럼 삭제하기
- drop table 테이블명 : 테이블 삭제

- insert into 테이블명 values() : 여러컬럼 데이터 한번에 입력하기
alt + x -> 전체 한번에 인서트

- update 테이블명 set 컬럼1 = 값, 컬럼2 = 값, ...
		--where 조건;
 : 컬럼값 업데이트하기, 수정하기

- truncate table 테이블명 : 테이블에 컬럼만 두고 데이터만 전체 삭제

- 테이블 생성하면서 pk와 fk 지정하기
CREATE TABLE daughter(
	idx		number(10) PRIMARY KEY ,
	mID		number(10),
	CONSTRAINTS 외래키명	FOREIGN KEY (mID)
	REFERENCES daddy(mID) ON DELETE CASCADE 
);
